// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(RustFrameworkFFI)
    import RustFrameworkFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_proton_pass_common_mobile_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_proton_pass_common_mobile_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol AliasPrefixValidatorProtocol {
    func validate(prefix: String) throws
}

public class AliasPrefixValidator: AliasPrefixValidatorProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_proton_pass_common_mobile_fn_constructor_aliasprefixvalidator_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_proton_pass_common_mobile_fn_free_aliasprefixvalidator(pointer, $0) }
    }

    public func validate(prefix: String) throws {
        try
            rustCallWithError(FfiConverterTypeAliasPrefixError.lift) {
                uniffi_proton_pass_common_mobile_fn_method_aliasprefixvalidator_validate(self.pointer,
                                                                                         FfiConverterString.lower(prefix), $0)
            }
    }
}

public struct FfiConverterTypeAliasPrefixValidator: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AliasPrefixValidator

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AliasPrefixValidator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AliasPrefixValidator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AliasPrefixValidator {
        return AliasPrefixValidator(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AliasPrefixValidator) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeAliasPrefixValidator_lift(_ pointer: UnsafeMutableRawPointer) throws -> AliasPrefixValidator {
    return try FfiConverterTypeAliasPrefixValidator.lift(pointer)
}

public func FfiConverterTypeAliasPrefixValidator_lower(_ value: AliasPrefixValidator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAliasPrefixValidator.lower(value)
}

public protocol EmailValidatorProtocol {
    func isEmailValid(email: String) -> Bool
}

public class EmailValidator: EmailValidatorProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_proton_pass_common_mobile_fn_constructor_emailvalidator_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_proton_pass_common_mobile_fn_free_emailvalidator(pointer, $0) }
    }

    public func isEmailValid(email: String) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_proton_pass_common_mobile_fn_method_emailvalidator_is_email_valid(self.pointer,
                                                                                             FfiConverterString.lower(email), $0)
                }
        )
    }
}

public struct FfiConverterTypeEmailValidator: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EmailValidator

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EmailValidator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EmailValidator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EmailValidator {
        return EmailValidator(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EmailValidator) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeEmailValidator_lift(_ pointer: UnsafeMutableRawPointer) throws -> EmailValidator {
    return try FfiConverterTypeEmailValidator.lift(pointer)
}

public func FfiConverterTypeEmailValidator_lower(_ value: EmailValidator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEmailValidator.lower(value)
}

public protocol LoginValidatorProtocol {
    func validate(login: Login) throws
}

public class LoginValidator: LoginValidatorProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_proton_pass_common_mobile_fn_constructor_loginvalidator_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_proton_pass_common_mobile_fn_free_loginvalidator(pointer, $0) }
    }

    public func validate(login: Login) throws {
        try
            rustCallWithError(FfiConverterTypeLoginError.lift) {
                uniffi_proton_pass_common_mobile_fn_method_loginvalidator_validate(self.pointer,
                                                                                   FfiConverterTypeLogin.lower(login), $0)
            }
    }
}

public struct FfiConverterTypeLoginValidator: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoginValidator

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoginValidator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoginValidator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoginValidator {
        return LoginValidator(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoginValidator) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeLoginValidator_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoginValidator {
    return try FfiConverterTypeLoginValidator.lift(pointer)
}

public func FfiConverterTypeLoginValidator_lower(_ value: LoginValidator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoginValidator.lower(value)
}

public protocol TotpUriParserProtocol {
    func parse(uriString: String) throws -> Totp
}

public class TotpUriParser: TotpUriParserProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_proton_pass_common_mobile_fn_constructor_totpuriparser_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_proton_pass_common_mobile_fn_free_totpuriparser(pointer, $0) }
    }

    public func parse(uriString: String) throws -> Totp {
        return try FfiConverterTypeTOTP.lift(
            rustCallWithError(FfiConverterTypeTOTPError.lift) {
                uniffi_proton_pass_common_mobile_fn_method_totpuriparser_parse(self.pointer,
                                                                               FfiConverterString.lower(uriString), $0)
            }
        )
    }
}

public struct FfiConverterTypeTotpUriParser: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TotpUriParser

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TotpUriParser {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TotpUriParser, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TotpUriParser {
        return TotpUriParser(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TotpUriParser) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeTotpUriParser_lift(_ pointer: UnsafeMutableRawPointer) throws -> TotpUriParser {
    return try FfiConverterTypeTotpUriParser.lift(pointer)
}

public func FfiConverterTypeTotpUriParser_lower(_ value: TotpUriParser) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTotpUriParser.lower(value)
}

public protocol TotpUriSanitizerProtocol {
    func uriForEditing(originalUri: String) -> String
    func uriForSaving(originalUri: String, editedUri: String) throws -> String
}

public class TotpUriSanitizer: TotpUriSanitizerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_proton_pass_common_mobile_fn_constructor_totpurisanitizer_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_proton_pass_common_mobile_fn_free_totpurisanitizer(pointer, $0) }
    }

    public func uriForEditing(originalUri: String) -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_proton_pass_common_mobile_fn_method_totpurisanitizer_uri_for_editing(self.pointer,
                                                                                                FfiConverterString.lower(originalUri), $0)
                }
        )
    }

    public func uriForSaving(originalUri: String, editedUri: String) throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeTOTPError.lift) {
                uniffi_proton_pass_common_mobile_fn_method_totpurisanitizer_uri_for_saving(self.pointer,
                                                                                           FfiConverterString.lower(originalUri),
                                                                                           FfiConverterString.lower(editedUri), $0)
            }
        )
    }
}

public struct FfiConverterTypeTotpUriSanitizer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TotpUriSanitizer

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TotpUriSanitizer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TotpUriSanitizer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TotpUriSanitizer {
        return TotpUriSanitizer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TotpUriSanitizer) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeTotpUriSanitizer_lift(_ pointer: UnsafeMutableRawPointer) throws -> TotpUriSanitizer {
    return try FfiConverterTypeTotpUriSanitizer.lift(pointer)
}

public func FfiConverterTypeTotpUriSanitizer_lower(_ value: TotpUriSanitizer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTotpUriSanitizer.lower(value)
}

public struct Login {
    public var title: String
    public var username: String
    public var password: String
    public var totp: String?
    public var urls: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(title: String, username: String, password: String, totp: String?, urls: [String]) {
        self.title = title
        self.username = username
        self.password = password
        self.totp = totp
        self.urls = urls
    }
}

extension Login: Equatable, Hashable {
    public static func == (lhs: Login, rhs: Login) -> Bool {
        if lhs.title != rhs.title {
            return false
        }
        if lhs.username != rhs.username {
            return false
        }
        if lhs.password != rhs.password {
            return false
        }
        if lhs.totp != rhs.totp {
            return false
        }
        if lhs.urls != rhs.urls {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(title)
        hasher.combine(username)
        hasher.combine(password)
        hasher.combine(totp)
        hasher.combine(urls)
    }
}

public struct FfiConverterTypeLogin: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Login {
        return try Login(
            title: FfiConverterString.read(from: &buf),
            username: FfiConverterString.read(from: &buf),
            password: FfiConverterString.read(from: &buf),
            totp: FfiConverterOptionString.read(from: &buf),
            urls: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: Login, into buf: inout [UInt8]) {
        FfiConverterString.write(value.title, into: &buf)
        FfiConverterString.write(value.username, into: &buf)
        FfiConverterString.write(value.password, into: &buf)
        FfiConverterOptionString.write(value.totp, into: &buf)
        FfiConverterSequenceString.write(value.urls, into: &buf)
    }
}

public func FfiConverterTypeLogin_lift(_ buf: RustBuffer) throws -> Login {
    return try FfiConverterTypeLogin.lift(buf)
}

public func FfiConverterTypeLogin_lower(_ value: Login) -> RustBuffer {
    return FfiConverterTypeLogin.lower(value)
}

public struct Totp {
    public var label: String?
    public var secret: String
    public var issuer: String?
    public var algorithm: TotpAlgorithm?
    public var digits: UInt8?
    public var period: UInt16?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(label: String?, secret: String, issuer: String?, algorithm: TotpAlgorithm?, digits: UInt8?, period: UInt16?) {
        self.label = label
        self.secret = secret
        self.issuer = issuer
        self.algorithm = algorithm
        self.digits = digits
        self.period = period
    }
}

extension Totp: Equatable, Hashable {
    public static func == (lhs: Totp, rhs: Totp) -> Bool {
        if lhs.label != rhs.label {
            return false
        }
        if lhs.secret != rhs.secret {
            return false
        }
        if lhs.issuer != rhs.issuer {
            return false
        }
        if lhs.algorithm != rhs.algorithm {
            return false
        }
        if lhs.digits != rhs.digits {
            return false
        }
        if lhs.period != rhs.period {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(label)
        hasher.combine(secret)
        hasher.combine(issuer)
        hasher.combine(algorithm)
        hasher.combine(digits)
        hasher.combine(period)
    }
}

public struct FfiConverterTypeTOTP: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Totp {
        return try Totp(
            label: FfiConverterOptionString.read(from: &buf),
            secret: FfiConverterString.read(from: &buf),
            issuer: FfiConverterOptionString.read(from: &buf),
            algorithm: FfiConverterOptionTypeTOTPAlgorithm.read(from: &buf),
            digits: FfiConverterOptionUInt8.read(from: &buf),
            period: FfiConverterOptionUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: Totp, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.label, into: &buf)
        FfiConverterString.write(value.secret, into: &buf)
        FfiConverterOptionString.write(value.issuer, into: &buf)
        FfiConverterOptionTypeTOTPAlgorithm.write(value.algorithm, into: &buf)
        FfiConverterOptionUInt8.write(value.digits, into: &buf)
        FfiConverterOptionUInt16.write(value.period, into: &buf)
    }
}

public func FfiConverterTypeTOTP_lift(_ buf: RustBuffer) throws -> Totp {
    return try FfiConverterTypeTOTP.lift(buf)
}

public func FfiConverterTypeTOTP_lower(_ value: Totp) -> RustBuffer {
    return FfiConverterTypeTOTP.lower(value)
}

public enum AliasPrefixError {
    // Simple error enums only carry a message
    case TwoConsecutiveDots(message: String)

    // Simple error enums only carry a message
    case InvalidCharacter(message: String)

    // Simple error enums only carry a message
    case DotAtTheEnd(message: String)

    // Simple error enums only carry a message
    case PrefixTooLong(message: String)

    // Simple error enums only carry a message
    case PrefixEmpty(message: String)

    // Simple error enums only carry a message
    case DotAtTheBeginning(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeAliasPrefixError.lift(error)
    }
}

public struct FfiConverterTypeAliasPrefixError: FfiConverterRustBuffer {
    typealias SwiftType = AliasPrefixError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AliasPrefixError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .TwoConsecutiveDots(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .InvalidCharacter(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .DotAtTheEnd(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .PrefixTooLong(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .PrefixEmpty(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .DotAtTheBeginning(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AliasPrefixError, into buf: inout [UInt8]) {
        switch value {
        case let .TwoConsecutiveDots(message):
            writeInt(&buf, Int32(1))
        case let .InvalidCharacter(message):
            writeInt(&buf, Int32(2))
        case let .DotAtTheEnd(message):
            writeInt(&buf, Int32(3))
        case let .PrefixTooLong(message):
            writeInt(&buf, Int32(4))
        case let .PrefixEmpty(message):
            writeInt(&buf, Int32(5))
        case let .DotAtTheBeginning(message):
            writeInt(&buf, Int32(6))
        }
    }
}

extension AliasPrefixError: Equatable, Hashable {}

extension AliasPrefixError: Error {}

public enum LoginError {
    // Simple error enums only carry a message
    case InvalidTotp(message: String)

    // Simple error enums only carry a message
    case InvalidUrl(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeLoginError.lift(error)
    }
}

public struct FfiConverterTypeLoginError: FfiConverterRustBuffer {
    typealias SwiftType = LoginError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoginError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .InvalidTotp(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .InvalidUrl(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LoginError, into buf: inout [UInt8]) {
        switch value {
        case let .InvalidTotp(message):
            writeInt(&buf, Int32(1))
        case let .InvalidUrl(message):
            writeInt(&buf, Int32(2))
        }
    }
}

extension LoginError: Equatable, Hashable {}

extension LoginError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TotpAlgorithm {
    case sha1
    case sha256
    case sha512
}

public struct FfiConverterTypeTOTPAlgorithm: FfiConverterRustBuffer {
    typealias SwiftType = TotpAlgorithm

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TotpAlgorithm {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .sha1

        case 2: return .sha256

        case 3: return .sha512

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TotpAlgorithm, into buf: inout [UInt8]) {
        switch value {
        case .sha1:
            writeInt(&buf, Int32(1))

        case .sha256:
            writeInt(&buf, Int32(2))

        case .sha512:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeTOTPAlgorithm_lift(_ buf: RustBuffer) throws -> TotpAlgorithm {
    return try FfiConverterTypeTOTPAlgorithm.lift(buf)
}

public func FfiConverterTypeTOTPAlgorithm_lower(_ value: TotpAlgorithm) -> RustBuffer {
    return FfiConverterTypeTOTPAlgorithm.lower(value)
}

extension TotpAlgorithm: Equatable, Hashable {}

public enum TotpError {
    // Simple error enums only carry a message
    case NotTotpUri(message: String)

    // Simple error enums only carry a message
    case InvalidAuthority(message: String)

    // Simple error enums only carry a message
    case NoAuthority(message: String)

    // Simple error enums only carry a message
    case InvalidAlgorithm(message: String)

    // Simple error enums only carry a message
    case InvalidScheme(message: String)

    // Simple error enums only carry a message
    case UrlParseError(message: String)

    // Simple error enums only carry a message
    case NoSecret(message: String)

    // Simple error enums only carry a message
    case EmptySecret(message: String)

    // Simple error enums only carry a message
    case NoQueries(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeTOTPError.lift(error)
    }
}

public struct FfiConverterTypeTOTPError: FfiConverterRustBuffer {
    typealias SwiftType = TotpError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TotpError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .NotTotpUri(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .InvalidAuthority(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .NoAuthority(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .InvalidAlgorithm(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .InvalidScheme(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .UrlParseError(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .NoSecret(
                message: FfiConverterString.read(from: &buf)
            )

        case 8: return try .EmptySecret(
                message: FfiConverterString.read(from: &buf)
            )

        case 9: return try .NoQueries(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TotpError, into buf: inout [UInt8]) {
        switch value {
        case let .NotTotpUri(message):
            writeInt(&buf, Int32(1))
        case let .InvalidAuthority(message):
            writeInt(&buf, Int32(2))
        case let .NoAuthority(message):
            writeInt(&buf, Int32(3))
        case let .InvalidAlgorithm(message):
            writeInt(&buf, Int32(4))
        case let .InvalidScheme(message):
            writeInt(&buf, Int32(5))
        case let .UrlParseError(message):
            writeInt(&buf, Int32(6))
        case let .NoSecret(message):
            writeInt(&buf, Int32(7))
        case let .EmptySecret(message):
            writeInt(&buf, Int32(8))
        case let .NoQueries(message):
            writeInt(&buf, Int32(9))
        }
    }
}

extension TotpError: Equatable, Hashable {}

extension TotpError: Error {}

private struct FfiConverterOptionUInt8: FfiConverterRustBuffer {
    typealias SwiftType = UInt8?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeTOTPAlgorithm: FfiConverterRustBuffer {
    typealias SwiftType = TotpAlgorithm?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTOTPAlgorithm.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTOTPAlgorithm.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

public func libraryVersion() -> String {
    return try! FfiConverterString.lift(
        try! rustCall {
            uniffi_proton_pass_common_mobile_fn_func_library_version($0)
        }
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_proton_pass_common_mobile_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_func_library_version() != 41133 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_method_aliasprefixvalidator_validate() != 27396 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_method_loginvalidator_validate() != 10934 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_method_emailvalidator_is_email_valid() != 33535 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_method_totpurisanitizer_uri_for_editing() != 36269 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_method_totpurisanitizer_uri_for_saving() != 63563 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_method_totpuriparser_parse() != 33105 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_constructor_aliasprefixvalidator_new() != 7446 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_constructor_loginvalidator_new() != 40416 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_constructor_emailvalidator_new() != 37096 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_constructor_totpurisanitizer_new() != 51618 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_proton_pass_common_mobile_checksum_constructor_totpuriparser_new() != 5594 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
